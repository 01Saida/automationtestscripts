package qvcaemsuite.utilities;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.ViewName;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Optional;

public class ExtentReporter{

	protected static ExtentTest test;
	protected static ExtentReports extent;
	private static DateFormat dateFormat;
	private static Date date;
	private static String dt;
	private static String buildnumber;
	private static String jenkinsjobname;
	public static String extentReportPath;
	private static String extentReport, reportFolder, reportPath,title;
	private static HashMap testStatusDetail;
	static Map extentTestMap = new HashMap();
	static Map testMap = new HashMap();

	@BeforeSuite(alwaysRun = true)
	public void extentsetUp(ITestContext xmlSuite) {
		String suitName = xmlSuite.getSuite().getName();
		startExtentReport(suitName);
	}
	/*
	//Jenkins version
	public synchronized static ExtentReports startExtentReport(String suiteName) {
		try {

				dateFormat = new SimpleDateFormat("MMM-dd_HH-mm");
				date = new Date();
				dt = dateFormat.format(date);
				reportFolder = suiteName;
				extentReportPath = System.getProperty("user.dir") +"/test-output/";
				extentReport= reportFolder + "/" + suiteName + "_Report.html";
				System.out.println(extentReportPath+"reports/extent" + "/" + reportFolder);
				extent = new ExtentReports(extentReportPath+"/reports/extent" + "/" + extentReport, false, NetworkMode.ONLINE);
				testStatusDetail = new HashMap();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return extent;
	}*/

	//local version
	public synchronized static ExtentReports startExtentReport(String suiteName) {
		try {
			dateFormat = new SimpleDateFormat("MMM-dd_HH-mm");
			date = new Date();
			dt = dateFormat.format(date);
			reportFolder = suiteName + "_" + dt;

			extentReportPath = System.getProperty("user.dir") +"/test-output/";
			buildnumber = System.getProperty("jenkinsbuild");
			jenkinsjobname= System.getProperty("jobname");

			if (buildnumber!=null) {
				reportFolder = buildnumber;
				extentReport = buildnumber + "/" + jenkinsjobname + ".html";
				title=jenkinsjobname;
			}else {
				extentReport = reportFolder + "/" + suiteName + "_Report_" + dt + ".html";
				title=suiteName;
			}

			/* NEW CHANGES FOR V5.0.8 */
			extent = new ExtentReports();
			ExtentSparkReporter spark = new ExtentSparkReporter(extentReportPath+"/reports/extent" + "/" + extentReport)
					.viewConfigurer()
					.viewOrder()
					.as(new ViewName[] {
							ViewName.DASHBOARD,
							ViewName.TEST,
							ViewName.CATEGORY,
							ViewName.AUTHOR,
							ViewName.DEVICE,
							ViewName.EXCEPTION,
							ViewName.LOG
					})
					.apply();
			extent.attachReporter(spark);
			extent.setSystemInfo("Environment", "QVC");
			extent.setSystemInfo("OS Version", System.getProperty("os.name"));
			extent.setSystemInfo("Java Version", System.getProperty("java.version"));
			extent.setSystemInfo("User Name", System.getProperty("user.name"));
			extent.setSystemInfo("Build Number", buildnumber);
			extent.setSystemInfo("Title", jenkinsjobname);

			testStatusDetail = new HashMap();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return extent;
	}

	public synchronized ExtentTest startTestCase(String testName) {

		test = getReporter().createTest(testName, testName);
		return test;
	}

	@SuppressWarnings("unchecked")
	public synchronized static void reportStep(WebDriver driver, String desc){
		try {
			getTest().log(Status.INFO, desc);
			testStatusDetail.put(getTestName(), "-");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	public synchronized static void reportStep(WebDriver driver, String desc, String status, int scFlag){
		try{

			if (status.toUpperCase().equals("PASS")) {

				if (scFlag > 0) {
					test.log(Status.PASS, desc)
							.pass(MediaEntityBuilder.createScreenCaptureFromPath("Screenshots/" + getScreenShot(driver) + ".jpg").build());
					testStatusDetail.put(getTestName(), "-");
				}
				else {
					getTest().log(Status.PASS, desc);
					testStatusDetail.put(getTestName(), "-");
				}

			} else if (status.toUpperCase().equals("FAIL")) {
				if (scFlag > 0) {
					getTest().log(Status.FAIL,  desc)
							.fail(MediaEntityBuilder.createScreenCaptureFromPath("Screenshots/" + getScreenShot(driver) + ".jpg").build());
					testStatusDetail.put(getTestName(), desc);
					Assert.assertTrue(Boolean.parseBoolean(status));
				}
				else
				{
					getTest().log(Status.FAIL, desc);
					testStatusDetail.put(getTestName(), "-");
					Assert.assertTrue(Boolean.parseBoolean(status));
				}

			} else if (status.toUpperCase().equals("SKIP")) {
				getTest().log(Status.SKIP, desc);
				testStatusDetail.put(getTestName(), desc);
			}else if (status.toUpperCase().equals("INFO")) {
				if (scFlag > 0) {
					getTest().log(Status.INFO, desc)
							.info(MediaEntityBuilder.createScreenCaptureFromPath("Screenshots/" + getScreenShot(driver) + ".jpg").build());
					testStatusDetail.put(getTestName(), "-");
				}
				else
				{
					getTest().log(Status.INFO, desc);
					testStatusDetail.put(getTestName(), "-");
				}

			}else if (status.toUpperCase().equals("WARNING")) {
				if (scFlag > 0) {
					getTest().log(Status.WARNING, desc)
							.warning(MediaEntityBuilder.createScreenCaptureFromPath("Screenshots/" + getScreenShot(driver) + ".jpg").build());
					testStatusDetail.put(getTestName(), "-");
				}
				else
				{
					getTest().log(Status.WARNING, desc);
					testStatusDetail.put(getTestName(), "-");
				}

			}
		} catch (Exception e) {
			System.out.println("Exception occured in method reportStep"+e.getMessage());
			Assert.fail("Exception occured in method reportStep");
		//	try {
		//		throw (e);
		//	} catch (Exception e1) {
				// TODO Auto-generated catch block
		//		e1.printStackTrace();
		//	}
		}
		// return test;

	}


	private static long getScreenShot(WebDriver driver) throws IOException{
		long number = (long) Math.floor(Math.random() * 900000000L) + 10000000L;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.jsReturnsValue("return document.readyState==\"complete\";"));
			FileUtils.copyFile(((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE),
					new File(extentReportPath+"reports/extent" + "/" + reportFolder+ "/Screenshots/" + number + ".jpg"));
		} catch (WebDriverException e) {
			e.printStackTrace();
		}
		return number;
	}



	protected synchronized void endExtentReport(String status, ITestResult result) {
		if (status == "Failed") {
			ExtentReporter.getTest().log(Status.FAIL, result.getThrowable());
		} else if (status == "Skipped") {
			ExtentReporter.getTest().log(Status.SKIP, "Test skipped " + result.getThrowable());
		} else {
			ExtentReporter.getTest().log(Status.PASS, "Test passed");
		}
//	        endTest();
		getReporter().flush();
	}

	protected synchronized void endExtentReport(String scenario, String status) {
		if (status == "Failed") {
			ExtentReporter.getTest().log(Status.FAIL, "Scenario \"" + scenario + "\" Failed.");
		} else if (status == "Skipped") {
			ExtentReporter.getTest().log(Status.SKIP, "Scenario \"" + scenario + "\" Skipped." );
		} else {
			ExtentReporter.getTest().log(Status.PASS, "Scenario \"" + scenario + "\" Passed.");
		}
//	        endTest();
		getReporter().flush();
	}

	public synchronized static void endExtentReport() {
//	        endTest();
		getReporter().flush();
	}

	private synchronized static ExtentReports getReporter() {
		if(extent==null)
			extent=startExtentReport("Non Transactional Automation");
		return extent;
	}

	private static synchronized ExtentTest getTest() {
		return (ExtentTest) extentTestMap.get((int) (long) (Thread.currentThread().getId()));
	}
	private static synchronized String getTestName() {
		String testName= (String) testMap.get((int) (long) (Thread.currentThread().getId()));
		return testName;
	}

	@SuppressWarnings("unused")
	private synchronized ExtentTest startExtentTestReport(String testName) {
		return startExtentTestReport(testName, "");
	}

	@SuppressWarnings("unchecked")
	public synchronized static ExtentTest startExtentTestReport(String testName, String desc) {
		test = getReporter().createTest(testName, desc)
				.assignCategory(testName.substring(0,testName.lastIndexOf("::")));
		extentTestMap.put((int) (long) (Thread.currentThread().getId()), test);
		testMap.put((int) (long) (Thread.currentThread().getId()), testName);

		return test;
	}

	public synchronized static void reportStep(WebDriver driver,String desc,String status){
		try {
			getTest().log(Status.FAIL, desc);
			testStatusDetail.put(getTestName(), "-");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
